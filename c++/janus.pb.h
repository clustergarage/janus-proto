// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: janus.proto

#ifndef PROTOBUF_INCLUDED_janus_2eproto
#define PROTOBUF_INCLUDED_janus_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_janus_2eproto 

namespace protobuf_janus_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_janus_2eproto
namespace janus {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class JanusGuardSubject;
class JanusGuardSubjectDefaultTypeInternal;
extern JanusGuardSubjectDefaultTypeInternal _JanusGuardSubject_default_instance_;
class JanusGuardSubject_TagsEntry_DoNotUse;
class JanusGuardSubject_TagsEntry_DoNotUseDefaultTypeInternal;
extern JanusGuardSubject_TagsEntry_DoNotUseDefaultTypeInternal _JanusGuardSubject_TagsEntry_DoNotUse_default_instance_;
class JanusdConfig;
class JanusdConfigDefaultTypeInternal;
extern JanusdConfigDefaultTypeInternal _JanusdConfig_default_instance_;
class JanusdHandle;
class JanusdHandleDefaultTypeInternal;
extern JanusdHandleDefaultTypeInternal _JanusdHandle_default_instance_;
}  // namespace janus
namespace google {
namespace protobuf {
template<> ::janus::Empty* Arena::CreateMaybeMessage<::janus::Empty>(Arena*);
template<> ::janus::JanusGuardSubject* Arena::CreateMaybeMessage<::janus::JanusGuardSubject>(Arena*);
template<> ::janus::JanusGuardSubject_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::janus::JanusGuardSubject_TagsEntry_DoNotUse>(Arena*);
template<> ::janus::JanusdConfig* Arena::CreateMaybeMessage<::janus::JanusdConfig>(Arena*);
template<> ::janus::JanusdHandle* Arena::CreateMaybeMessage<::janus::JanusdHandle>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace janus {

// ===================================================================

class JanusdConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:janus.JanusdConfig) */ {
 public:
  JanusdConfig();
  virtual ~JanusdConfig();

  JanusdConfig(const JanusdConfig& from);

  inline JanusdConfig& operator=(const JanusdConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JanusdConfig(JanusdConfig&& from) noexcept
    : JanusdConfig() {
    *this = ::std::move(from);
  }

  inline JanusdConfig& operator=(JanusdConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JanusdConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JanusdConfig* internal_default_instance() {
    return reinterpret_cast<const JanusdConfig*>(
               &_JanusdConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(JanusdConfig* other);
  friend void swap(JanusdConfig& a, JanusdConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JanusdConfig* New() const final {
    return CreateMaybeMessage<JanusdConfig>(NULL);
  }

  JanusdConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JanusdConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JanusdConfig& from);
  void MergeFrom(const JanusdConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JanusdConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 pid = 4;
  int pid_size() const;
  void clear_pid();
  static const int kPidFieldNumber = 4;
  ::google::protobuf::int32 pid(int index) const;
  void set_pid(int index, ::google::protobuf::int32 value);
  void add_pid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pid();

  // repeated string cid = 5;
  int cid_size() const;
  void clear_cid();
  static const int kCidFieldNumber = 5;
  const ::std::string& cid(int index) const;
  ::std::string* mutable_cid(int index);
  void set_cid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_cid(int index, ::std::string&& value);
  #endif
  void set_cid(int index, const char* value);
  void set_cid(int index, const char* value, size_t size);
  ::std::string* add_cid();
  void add_cid(const ::std::string& value);
  #if LANG_CXX11
  void add_cid(::std::string&& value);
  #endif
  void add_cid(const char* value);
  void add_cid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& cid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cid();

  // repeated .janus.JanusGuardSubject subject = 6;
  int subject_size() const;
  void clear_subject();
  static const int kSubjectFieldNumber = 6;
  ::janus::JanusGuardSubject* mutable_subject(int index);
  ::google::protobuf::RepeatedPtrField< ::janus::JanusGuardSubject >*
      mutable_subject();
  const ::janus::JanusGuardSubject& subject(int index) const;
  ::janus::JanusGuardSubject* add_subject();
  const ::google::protobuf::RepeatedPtrField< ::janus::JanusGuardSubject >&
      subject() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string nodeName = 2;
  void clear_nodename();
  static const int kNodeNameFieldNumber = 2;
  const ::std::string& nodename() const;
  void set_nodename(const ::std::string& value);
  #if LANG_CXX11
  void set_nodename(::std::string&& value);
  #endif
  void set_nodename(const char* value);
  void set_nodename(const char* value, size_t size);
  ::std::string* mutable_nodename();
  ::std::string* release_nodename();
  void set_allocated_nodename(::std::string* nodename);

  // string podName = 3;
  void clear_podname();
  static const int kPodNameFieldNumber = 3;
  const ::std::string& podname() const;
  void set_podname(const ::std::string& value);
  #if LANG_CXX11
  void set_podname(::std::string&& value);
  #endif
  void set_podname(const char* value);
  void set_podname(const char* value, size_t size);
  ::std::string* mutable_podname();
  ::std::string* release_podname();
  void set_allocated_podname(::std::string* podname);

  // string logFormat = 7;
  void clear_logformat();
  static const int kLogFormatFieldNumber = 7;
  const ::std::string& logformat() const;
  void set_logformat(const ::std::string& value);
  #if LANG_CXX11
  void set_logformat(::std::string&& value);
  #endif
  void set_logformat(const char* value);
  void set_logformat(const char* value, size_t size);
  ::std::string* mutable_logformat();
  ::std::string* release_logformat();
  void set_allocated_logformat(::std::string* logformat);

  // @@protoc_insertion_point(class_scope:janus.JanusdConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pid_;
  mutable int _pid_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cid_;
  ::google::protobuf::RepeatedPtrField< ::janus::JanusGuardSubject > subject_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr nodename_;
  ::google::protobuf::internal::ArenaStringPtr podname_;
  ::google::protobuf::internal::ArenaStringPtr logformat_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_janus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JanusGuardSubject_TagsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<JanusGuardSubject_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<JanusGuardSubject_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  JanusGuardSubject_TagsEntry_DoNotUse();
  JanusGuardSubject_TagsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const JanusGuardSubject_TagsEntry_DoNotUse& other);
  static const JanusGuardSubject_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const JanusGuardSubject_TagsEntry_DoNotUse*>(&_JanusGuardSubject_TagsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class JanusGuardSubject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:janus.JanusGuardSubject) */ {
 public:
  JanusGuardSubject();
  virtual ~JanusGuardSubject();

  JanusGuardSubject(const JanusGuardSubject& from);

  inline JanusGuardSubject& operator=(const JanusGuardSubject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JanusGuardSubject(JanusGuardSubject&& from) noexcept
    : JanusGuardSubject() {
    *this = ::std::move(from);
  }

  inline JanusGuardSubject& operator=(JanusGuardSubject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JanusGuardSubject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JanusGuardSubject* internal_default_instance() {
    return reinterpret_cast<const JanusGuardSubject*>(
               &_JanusGuardSubject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(JanusGuardSubject* other);
  friend void swap(JanusGuardSubject& a, JanusGuardSubject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JanusGuardSubject* New() const final {
    return CreateMaybeMessage<JanusGuardSubject>(NULL);
  }

  JanusGuardSubject* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JanusGuardSubject>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JanusGuardSubject& from);
  void MergeFrom(const JanusGuardSubject& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JanusGuardSubject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string allow = 1;
  int allow_size() const;
  void clear_allow();
  static const int kAllowFieldNumber = 1;
  const ::std::string& allow(int index) const;
  ::std::string* mutable_allow(int index);
  void set_allow(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_allow(int index, ::std::string&& value);
  #endif
  void set_allow(int index, const char* value);
  void set_allow(int index, const char* value, size_t size);
  ::std::string* add_allow();
  void add_allow(const ::std::string& value);
  #if LANG_CXX11
  void add_allow(::std::string&& value);
  #endif
  void add_allow(const char* value);
  void add_allow(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& allow() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_allow();

  // repeated string deny = 2;
  int deny_size() const;
  void clear_deny();
  static const int kDenyFieldNumber = 2;
  const ::std::string& deny(int index) const;
  ::std::string* mutable_deny(int index);
  void set_deny(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_deny(int index, ::std::string&& value);
  #endif
  void set_deny(int index, const char* value);
  void set_deny(int index, const char* value, size_t size);
  ::std::string* add_deny();
  void add_deny(const ::std::string& value);
  #if LANG_CXX11
  void add_deny(::std::string&& value);
  #endif
  void add_deny(const char* value);
  void add_deny(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& deny() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_deny();

  // repeated string event = 3;
  int event_size() const;
  void clear_event();
  static const int kEventFieldNumber = 3;
  const ::std::string& event(int index) const;
  ::std::string* mutable_event(int index);
  void set_event(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_event(int index, ::std::string&& value);
  #endif
  void set_event(int index, const char* value);
  void set_event(int index, const char* value, size_t size);
  ::std::string* add_event();
  void add_event(const ::std::string& value);
  #if LANG_CXX11
  void add_event(::std::string&& value);
  #endif
  void add_event(const char* value);
  void add_event(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& event() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_event();

  // map<string, string> tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      tags() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_tags();

  // @@protoc_insertion_point(class_scope:janus.JanusGuardSubject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> allow_;
  ::google::protobuf::RepeatedPtrField< ::std::string> deny_;
  ::google::protobuf::RepeatedPtrField< ::std::string> event_;
  ::google::protobuf::internal::MapField<
      JanusGuardSubject_TagsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_janus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JanusdHandle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:janus.JanusdHandle) */ {
 public:
  JanusdHandle();
  virtual ~JanusdHandle();

  JanusdHandle(const JanusdHandle& from);

  inline JanusdHandle& operator=(const JanusdHandle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JanusdHandle(JanusdHandle&& from) noexcept
    : JanusdHandle() {
    *this = ::std::move(from);
  }

  inline JanusdHandle& operator=(JanusdHandle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JanusdHandle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JanusdHandle* internal_default_instance() {
    return reinterpret_cast<const JanusdHandle*>(
               &_JanusdHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(JanusdHandle* other);
  friend void swap(JanusdHandle& a, JanusdHandle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JanusdHandle* New() const final {
    return CreateMaybeMessage<JanusdHandle>(NULL);
  }

  JanusdHandle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JanusdHandle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JanusdHandle& from);
  void MergeFrom(const JanusdHandle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JanusdHandle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 pid = 3;
  int pid_size() const;
  void clear_pid();
  static const int kPidFieldNumber = 3;
  ::google::protobuf::int32 pid(int index) const;
  void set_pid(int index, ::google::protobuf::int32 value);
  void add_pid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pid();

  // repeated int32 processEventfd = 4;
  int processeventfd_size() const;
  void clear_processeventfd();
  static const int kProcessEventfdFieldNumber = 4;
  ::google::protobuf::int32 processeventfd(int index) const;
  void set_processeventfd(int index, ::google::protobuf::int32 value);
  void add_processeventfd(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      processeventfd() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_processeventfd();

  // string nodeName = 1;
  void clear_nodename();
  static const int kNodeNameFieldNumber = 1;
  const ::std::string& nodename() const;
  void set_nodename(const ::std::string& value);
  #if LANG_CXX11
  void set_nodename(::std::string&& value);
  #endif
  void set_nodename(const char* value);
  void set_nodename(const char* value, size_t size);
  ::std::string* mutable_nodename();
  ::std::string* release_nodename();
  void set_allocated_nodename(::std::string* nodename);

  // string podName = 2;
  void clear_podname();
  static const int kPodNameFieldNumber = 2;
  const ::std::string& podname() const;
  void set_podname(const ::std::string& value);
  #if LANG_CXX11
  void set_podname(::std::string&& value);
  #endif
  void set_podname(const char* value);
  void set_podname(const char* value, size_t size);
  ::std::string* mutable_podname();
  ::std::string* release_podname();
  void set_allocated_podname(::std::string* podname);

  // @@protoc_insertion_point(class_scope:janus.JanusdHandle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pid_;
  mutable int _pid_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > processeventfd_;
  mutable int _processeventfd_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr nodename_;
  ::google::protobuf::internal::ArenaStringPtr podname_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_janus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:janus.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(NULL);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:janus.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_janus_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JanusdConfig

// string name = 1;
inline void JanusdConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JanusdConfig::name() const {
  // @@protoc_insertion_point(field_get:janus.JanusdConfig.name)
  return name_.GetNoArena();
}
inline void JanusdConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:janus.JanusdConfig.name)
}
#if LANG_CXX11
inline void JanusdConfig::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:janus.JanusdConfig.name)
}
#endif
inline void JanusdConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:janus.JanusdConfig.name)
}
inline void JanusdConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:janus.JanusdConfig.name)
}
inline ::std::string* JanusdConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:janus.JanusdConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JanusdConfig::release_name() {
  // @@protoc_insertion_point(field_release:janus.JanusdConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JanusdConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:janus.JanusdConfig.name)
}

// string nodeName = 2;
inline void JanusdConfig::clear_nodename() {
  nodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JanusdConfig::nodename() const {
  // @@protoc_insertion_point(field_get:janus.JanusdConfig.nodeName)
  return nodename_.GetNoArena();
}
inline void JanusdConfig::set_nodename(const ::std::string& value) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:janus.JanusdConfig.nodeName)
}
#if LANG_CXX11
inline void JanusdConfig::set_nodename(::std::string&& value) {
  
  nodename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:janus.JanusdConfig.nodeName)
}
#endif
inline void JanusdConfig::set_nodename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:janus.JanusdConfig.nodeName)
}
inline void JanusdConfig::set_nodename(const char* value, size_t size) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:janus.JanusdConfig.nodeName)
}
inline ::std::string* JanusdConfig::mutable_nodename() {
  
  // @@protoc_insertion_point(field_mutable:janus.JanusdConfig.nodeName)
  return nodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JanusdConfig::release_nodename() {
  // @@protoc_insertion_point(field_release:janus.JanusdConfig.nodeName)
  
  return nodename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JanusdConfig::set_allocated_nodename(::std::string* nodename) {
  if (nodename != NULL) {
    
  } else {
    
  }
  nodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodename);
  // @@protoc_insertion_point(field_set_allocated:janus.JanusdConfig.nodeName)
}

// string podName = 3;
inline void JanusdConfig::clear_podname() {
  podname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JanusdConfig::podname() const {
  // @@protoc_insertion_point(field_get:janus.JanusdConfig.podName)
  return podname_.GetNoArena();
}
inline void JanusdConfig::set_podname(const ::std::string& value) {
  
  podname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:janus.JanusdConfig.podName)
}
#if LANG_CXX11
inline void JanusdConfig::set_podname(::std::string&& value) {
  
  podname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:janus.JanusdConfig.podName)
}
#endif
inline void JanusdConfig::set_podname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  podname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:janus.JanusdConfig.podName)
}
inline void JanusdConfig::set_podname(const char* value, size_t size) {
  
  podname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:janus.JanusdConfig.podName)
}
inline ::std::string* JanusdConfig::mutable_podname() {
  
  // @@protoc_insertion_point(field_mutable:janus.JanusdConfig.podName)
  return podname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JanusdConfig::release_podname() {
  // @@protoc_insertion_point(field_release:janus.JanusdConfig.podName)
  
  return podname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JanusdConfig::set_allocated_podname(::std::string* podname) {
  if (podname != NULL) {
    
  } else {
    
  }
  podname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), podname);
  // @@protoc_insertion_point(field_set_allocated:janus.JanusdConfig.podName)
}

// repeated int32 pid = 4;
inline int JanusdConfig::pid_size() const {
  return pid_.size();
}
inline void JanusdConfig::clear_pid() {
  pid_.Clear();
}
inline ::google::protobuf::int32 JanusdConfig::pid(int index) const {
  // @@protoc_insertion_point(field_get:janus.JanusdConfig.pid)
  return pid_.Get(index);
}
inline void JanusdConfig::set_pid(int index, ::google::protobuf::int32 value) {
  pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:janus.JanusdConfig.pid)
}
inline void JanusdConfig::add_pid(::google::protobuf::int32 value) {
  pid_.Add(value);
  // @@protoc_insertion_point(field_add:janus.JanusdConfig.pid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
JanusdConfig::pid() const {
  // @@protoc_insertion_point(field_list:janus.JanusdConfig.pid)
  return pid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
JanusdConfig::mutable_pid() {
  // @@protoc_insertion_point(field_mutable_list:janus.JanusdConfig.pid)
  return &pid_;
}

// repeated string cid = 5;
inline int JanusdConfig::cid_size() const {
  return cid_.size();
}
inline void JanusdConfig::clear_cid() {
  cid_.Clear();
}
inline const ::std::string& JanusdConfig::cid(int index) const {
  // @@protoc_insertion_point(field_get:janus.JanusdConfig.cid)
  return cid_.Get(index);
}
inline ::std::string* JanusdConfig::mutable_cid(int index) {
  // @@protoc_insertion_point(field_mutable:janus.JanusdConfig.cid)
  return cid_.Mutable(index);
}
inline void JanusdConfig::set_cid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:janus.JanusdConfig.cid)
  cid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void JanusdConfig::set_cid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:janus.JanusdConfig.cid)
  cid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void JanusdConfig::set_cid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:janus.JanusdConfig.cid)
}
inline void JanusdConfig::set_cid(int index, const char* value, size_t size) {
  cid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:janus.JanusdConfig.cid)
}
inline ::std::string* JanusdConfig::add_cid() {
  // @@protoc_insertion_point(field_add_mutable:janus.JanusdConfig.cid)
  return cid_.Add();
}
inline void JanusdConfig::add_cid(const ::std::string& value) {
  cid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:janus.JanusdConfig.cid)
}
#if LANG_CXX11
inline void JanusdConfig::add_cid(::std::string&& value) {
  cid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:janus.JanusdConfig.cid)
}
#endif
inline void JanusdConfig::add_cid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:janus.JanusdConfig.cid)
}
inline void JanusdConfig::add_cid(const char* value, size_t size) {
  cid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:janus.JanusdConfig.cid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JanusdConfig::cid() const {
  // @@protoc_insertion_point(field_list:janus.JanusdConfig.cid)
  return cid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JanusdConfig::mutable_cid() {
  // @@protoc_insertion_point(field_mutable_list:janus.JanusdConfig.cid)
  return &cid_;
}

// repeated .janus.JanusGuardSubject subject = 6;
inline int JanusdConfig::subject_size() const {
  return subject_.size();
}
inline void JanusdConfig::clear_subject() {
  subject_.Clear();
}
inline ::janus::JanusGuardSubject* JanusdConfig::mutable_subject(int index) {
  // @@protoc_insertion_point(field_mutable:janus.JanusdConfig.subject)
  return subject_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::janus::JanusGuardSubject >*
JanusdConfig::mutable_subject() {
  // @@protoc_insertion_point(field_mutable_list:janus.JanusdConfig.subject)
  return &subject_;
}
inline const ::janus::JanusGuardSubject& JanusdConfig::subject(int index) const {
  // @@protoc_insertion_point(field_get:janus.JanusdConfig.subject)
  return subject_.Get(index);
}
inline ::janus::JanusGuardSubject* JanusdConfig::add_subject() {
  // @@protoc_insertion_point(field_add:janus.JanusdConfig.subject)
  return subject_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::janus::JanusGuardSubject >&
JanusdConfig::subject() const {
  // @@protoc_insertion_point(field_list:janus.JanusdConfig.subject)
  return subject_;
}

// string logFormat = 7;
inline void JanusdConfig::clear_logformat() {
  logformat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JanusdConfig::logformat() const {
  // @@protoc_insertion_point(field_get:janus.JanusdConfig.logFormat)
  return logformat_.GetNoArena();
}
inline void JanusdConfig::set_logformat(const ::std::string& value) {
  
  logformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:janus.JanusdConfig.logFormat)
}
#if LANG_CXX11
inline void JanusdConfig::set_logformat(::std::string&& value) {
  
  logformat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:janus.JanusdConfig.logFormat)
}
#endif
inline void JanusdConfig::set_logformat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:janus.JanusdConfig.logFormat)
}
inline void JanusdConfig::set_logformat(const char* value, size_t size) {
  
  logformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:janus.JanusdConfig.logFormat)
}
inline ::std::string* JanusdConfig::mutable_logformat() {
  
  // @@protoc_insertion_point(field_mutable:janus.JanusdConfig.logFormat)
  return logformat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JanusdConfig::release_logformat() {
  // @@protoc_insertion_point(field_release:janus.JanusdConfig.logFormat)
  
  return logformat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JanusdConfig::set_allocated_logformat(::std::string* logformat) {
  if (logformat != NULL) {
    
  } else {
    
  }
  logformat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logformat);
  // @@protoc_insertion_point(field_set_allocated:janus.JanusdConfig.logFormat)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// JanusGuardSubject

// repeated string allow = 1;
inline int JanusGuardSubject::allow_size() const {
  return allow_.size();
}
inline void JanusGuardSubject::clear_allow() {
  allow_.Clear();
}
inline const ::std::string& JanusGuardSubject::allow(int index) const {
  // @@protoc_insertion_point(field_get:janus.JanusGuardSubject.allow)
  return allow_.Get(index);
}
inline ::std::string* JanusGuardSubject::mutable_allow(int index) {
  // @@protoc_insertion_point(field_mutable:janus.JanusGuardSubject.allow)
  return allow_.Mutable(index);
}
inline void JanusGuardSubject::set_allow(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:janus.JanusGuardSubject.allow)
  allow_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void JanusGuardSubject::set_allow(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:janus.JanusGuardSubject.allow)
  allow_.Mutable(index)->assign(std::move(value));
}
#endif
inline void JanusGuardSubject::set_allow(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  allow_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:janus.JanusGuardSubject.allow)
}
inline void JanusGuardSubject::set_allow(int index, const char* value, size_t size) {
  allow_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:janus.JanusGuardSubject.allow)
}
inline ::std::string* JanusGuardSubject::add_allow() {
  // @@protoc_insertion_point(field_add_mutable:janus.JanusGuardSubject.allow)
  return allow_.Add();
}
inline void JanusGuardSubject::add_allow(const ::std::string& value) {
  allow_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:janus.JanusGuardSubject.allow)
}
#if LANG_CXX11
inline void JanusGuardSubject::add_allow(::std::string&& value) {
  allow_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:janus.JanusGuardSubject.allow)
}
#endif
inline void JanusGuardSubject::add_allow(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  allow_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:janus.JanusGuardSubject.allow)
}
inline void JanusGuardSubject::add_allow(const char* value, size_t size) {
  allow_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:janus.JanusGuardSubject.allow)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JanusGuardSubject::allow() const {
  // @@protoc_insertion_point(field_list:janus.JanusGuardSubject.allow)
  return allow_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JanusGuardSubject::mutable_allow() {
  // @@protoc_insertion_point(field_mutable_list:janus.JanusGuardSubject.allow)
  return &allow_;
}

// repeated string deny = 2;
inline int JanusGuardSubject::deny_size() const {
  return deny_.size();
}
inline void JanusGuardSubject::clear_deny() {
  deny_.Clear();
}
inline const ::std::string& JanusGuardSubject::deny(int index) const {
  // @@protoc_insertion_point(field_get:janus.JanusGuardSubject.deny)
  return deny_.Get(index);
}
inline ::std::string* JanusGuardSubject::mutable_deny(int index) {
  // @@protoc_insertion_point(field_mutable:janus.JanusGuardSubject.deny)
  return deny_.Mutable(index);
}
inline void JanusGuardSubject::set_deny(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:janus.JanusGuardSubject.deny)
  deny_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void JanusGuardSubject::set_deny(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:janus.JanusGuardSubject.deny)
  deny_.Mutable(index)->assign(std::move(value));
}
#endif
inline void JanusGuardSubject::set_deny(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  deny_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:janus.JanusGuardSubject.deny)
}
inline void JanusGuardSubject::set_deny(int index, const char* value, size_t size) {
  deny_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:janus.JanusGuardSubject.deny)
}
inline ::std::string* JanusGuardSubject::add_deny() {
  // @@protoc_insertion_point(field_add_mutable:janus.JanusGuardSubject.deny)
  return deny_.Add();
}
inline void JanusGuardSubject::add_deny(const ::std::string& value) {
  deny_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:janus.JanusGuardSubject.deny)
}
#if LANG_CXX11
inline void JanusGuardSubject::add_deny(::std::string&& value) {
  deny_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:janus.JanusGuardSubject.deny)
}
#endif
inline void JanusGuardSubject::add_deny(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  deny_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:janus.JanusGuardSubject.deny)
}
inline void JanusGuardSubject::add_deny(const char* value, size_t size) {
  deny_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:janus.JanusGuardSubject.deny)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JanusGuardSubject::deny() const {
  // @@protoc_insertion_point(field_list:janus.JanusGuardSubject.deny)
  return deny_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JanusGuardSubject::mutable_deny() {
  // @@protoc_insertion_point(field_mutable_list:janus.JanusGuardSubject.deny)
  return &deny_;
}

// repeated string event = 3;
inline int JanusGuardSubject::event_size() const {
  return event_.size();
}
inline void JanusGuardSubject::clear_event() {
  event_.Clear();
}
inline const ::std::string& JanusGuardSubject::event(int index) const {
  // @@protoc_insertion_point(field_get:janus.JanusGuardSubject.event)
  return event_.Get(index);
}
inline ::std::string* JanusGuardSubject::mutable_event(int index) {
  // @@protoc_insertion_point(field_mutable:janus.JanusGuardSubject.event)
  return event_.Mutable(index);
}
inline void JanusGuardSubject::set_event(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:janus.JanusGuardSubject.event)
  event_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void JanusGuardSubject::set_event(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:janus.JanusGuardSubject.event)
  event_.Mutable(index)->assign(std::move(value));
}
#endif
inline void JanusGuardSubject::set_event(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  event_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:janus.JanusGuardSubject.event)
}
inline void JanusGuardSubject::set_event(int index, const char* value, size_t size) {
  event_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:janus.JanusGuardSubject.event)
}
inline ::std::string* JanusGuardSubject::add_event() {
  // @@protoc_insertion_point(field_add_mutable:janus.JanusGuardSubject.event)
  return event_.Add();
}
inline void JanusGuardSubject::add_event(const ::std::string& value) {
  event_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:janus.JanusGuardSubject.event)
}
#if LANG_CXX11
inline void JanusGuardSubject::add_event(::std::string&& value) {
  event_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:janus.JanusGuardSubject.event)
}
#endif
inline void JanusGuardSubject::add_event(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  event_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:janus.JanusGuardSubject.event)
}
inline void JanusGuardSubject::add_event(const char* value, size_t size) {
  event_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:janus.JanusGuardSubject.event)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JanusGuardSubject::event() const {
  // @@protoc_insertion_point(field_list:janus.JanusGuardSubject.event)
  return event_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JanusGuardSubject::mutable_event() {
  // @@protoc_insertion_point(field_mutable_list:janus.JanusGuardSubject.event)
  return &event_;
}

// map<string, string> tags = 4;
inline int JanusGuardSubject::tags_size() const {
  return tags_.size();
}
inline void JanusGuardSubject::clear_tags() {
  tags_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
JanusGuardSubject::tags() const {
  // @@protoc_insertion_point(field_map:janus.JanusGuardSubject.tags)
  return tags_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
JanusGuardSubject::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:janus.JanusGuardSubject.tags)
  return tags_.MutableMap();
}

// -------------------------------------------------------------------

// JanusdHandle

// string nodeName = 1;
inline void JanusdHandle::clear_nodename() {
  nodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JanusdHandle::nodename() const {
  // @@protoc_insertion_point(field_get:janus.JanusdHandle.nodeName)
  return nodename_.GetNoArena();
}
inline void JanusdHandle::set_nodename(const ::std::string& value) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:janus.JanusdHandle.nodeName)
}
#if LANG_CXX11
inline void JanusdHandle::set_nodename(::std::string&& value) {
  
  nodename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:janus.JanusdHandle.nodeName)
}
#endif
inline void JanusdHandle::set_nodename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:janus.JanusdHandle.nodeName)
}
inline void JanusdHandle::set_nodename(const char* value, size_t size) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:janus.JanusdHandle.nodeName)
}
inline ::std::string* JanusdHandle::mutable_nodename() {
  
  // @@protoc_insertion_point(field_mutable:janus.JanusdHandle.nodeName)
  return nodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JanusdHandle::release_nodename() {
  // @@protoc_insertion_point(field_release:janus.JanusdHandle.nodeName)
  
  return nodename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JanusdHandle::set_allocated_nodename(::std::string* nodename) {
  if (nodename != NULL) {
    
  } else {
    
  }
  nodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodename);
  // @@protoc_insertion_point(field_set_allocated:janus.JanusdHandle.nodeName)
}

// string podName = 2;
inline void JanusdHandle::clear_podname() {
  podname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JanusdHandle::podname() const {
  // @@protoc_insertion_point(field_get:janus.JanusdHandle.podName)
  return podname_.GetNoArena();
}
inline void JanusdHandle::set_podname(const ::std::string& value) {
  
  podname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:janus.JanusdHandle.podName)
}
#if LANG_CXX11
inline void JanusdHandle::set_podname(::std::string&& value) {
  
  podname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:janus.JanusdHandle.podName)
}
#endif
inline void JanusdHandle::set_podname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  podname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:janus.JanusdHandle.podName)
}
inline void JanusdHandle::set_podname(const char* value, size_t size) {
  
  podname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:janus.JanusdHandle.podName)
}
inline ::std::string* JanusdHandle::mutable_podname() {
  
  // @@protoc_insertion_point(field_mutable:janus.JanusdHandle.podName)
  return podname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JanusdHandle::release_podname() {
  // @@protoc_insertion_point(field_release:janus.JanusdHandle.podName)
  
  return podname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JanusdHandle::set_allocated_podname(::std::string* podname) {
  if (podname != NULL) {
    
  } else {
    
  }
  podname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), podname);
  // @@protoc_insertion_point(field_set_allocated:janus.JanusdHandle.podName)
}

// repeated int32 pid = 3;
inline int JanusdHandle::pid_size() const {
  return pid_.size();
}
inline void JanusdHandle::clear_pid() {
  pid_.Clear();
}
inline ::google::protobuf::int32 JanusdHandle::pid(int index) const {
  // @@protoc_insertion_point(field_get:janus.JanusdHandle.pid)
  return pid_.Get(index);
}
inline void JanusdHandle::set_pid(int index, ::google::protobuf::int32 value) {
  pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:janus.JanusdHandle.pid)
}
inline void JanusdHandle::add_pid(::google::protobuf::int32 value) {
  pid_.Add(value);
  // @@protoc_insertion_point(field_add:janus.JanusdHandle.pid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
JanusdHandle::pid() const {
  // @@protoc_insertion_point(field_list:janus.JanusdHandle.pid)
  return pid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
JanusdHandle::mutable_pid() {
  // @@protoc_insertion_point(field_mutable_list:janus.JanusdHandle.pid)
  return &pid_;
}

// repeated int32 processEventfd = 4;
inline int JanusdHandle::processeventfd_size() const {
  return processeventfd_.size();
}
inline void JanusdHandle::clear_processeventfd() {
  processeventfd_.Clear();
}
inline ::google::protobuf::int32 JanusdHandle::processeventfd(int index) const {
  // @@protoc_insertion_point(field_get:janus.JanusdHandle.processEventfd)
  return processeventfd_.Get(index);
}
inline void JanusdHandle::set_processeventfd(int index, ::google::protobuf::int32 value) {
  processeventfd_.Set(index, value);
  // @@protoc_insertion_point(field_set:janus.JanusdHandle.processEventfd)
}
inline void JanusdHandle::add_processeventfd(::google::protobuf::int32 value) {
  processeventfd_.Add(value);
  // @@protoc_insertion_point(field_add:janus.JanusdHandle.processEventfd)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
JanusdHandle::processeventfd() const {
  // @@protoc_insertion_point(field_list:janus.JanusdHandle.processEventfd)
  return processeventfd_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
JanusdHandle::mutable_processeventfd() {
  // @@protoc_insertion_point(field_mutable_list:janus.JanusdHandle.processEventfd)
  return &processeventfd_;
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace janus

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_janus_2eproto
