// Code generated by protoc-gen-go. DO NOT EDIT.
// source: janus.proto

package janus

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type JanusdConfig struct {
	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NodeName             string               `protobuf:"bytes,2,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	PodName              string               `protobuf:"bytes,3,opt,name=podName,proto3" json:"podName,omitempty"`
	Pid                  []int32              `protobuf:"varint,4,rep,packed,name=pid,proto3" json:"pid,omitempty"`
	Cid                  []string             `protobuf:"bytes,5,rep,name=cid,proto3" json:"cid,omitempty"`
	Subject              []*JanusGuardSubject `protobuf:"bytes,6,rep,name=subject,proto3" json:"subject,omitempty"`
	LogFormat            string               `protobuf:"bytes,7,opt,name=logFormat,proto3" json:"logFormat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *JanusdConfig) Reset()         { *m = JanusdConfig{} }
func (m *JanusdConfig) String() string { return proto.CompactTextString(m) }
func (*JanusdConfig) ProtoMessage()    {}
func (*JanusdConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_janus_46b3ab12a2781b9c, []int{0}
}
func (m *JanusdConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JanusdConfig.Unmarshal(m, b)
}
func (m *JanusdConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JanusdConfig.Marshal(b, m, deterministic)
}
func (dst *JanusdConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JanusdConfig.Merge(dst, src)
}
func (m *JanusdConfig) XXX_Size() int {
	return xxx_messageInfo_JanusdConfig.Size(m)
}
func (m *JanusdConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_JanusdConfig.DiscardUnknown(m)
}

var xxx_messageInfo_JanusdConfig proto.InternalMessageInfo

func (m *JanusdConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JanusdConfig) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *JanusdConfig) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *JanusdConfig) GetPid() []int32 {
	if m != nil {
		return m.Pid
	}
	return nil
}

func (m *JanusdConfig) GetCid() []string {
	if m != nil {
		return m.Cid
	}
	return nil
}

func (m *JanusdConfig) GetSubject() []*JanusGuardSubject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *JanusdConfig) GetLogFormat() string {
	if m != nil {
		return m.LogFormat
	}
	return ""
}

type JanusGuardSubject struct {
	Allow                []string          `protobuf:"bytes,1,rep,name=allow,proto3" json:"allow,omitempty"`
	Deny                 []string          `protobuf:"bytes,2,rep,name=deny,proto3" json:"deny,omitempty"`
	Event                []string          `protobuf:"bytes,3,rep,name=event,proto3" json:"event,omitempty"`
	OnlyDir              bool              `protobuf:"varint,4,opt,name=onlyDir,proto3" json:"onlyDir,omitempty"`
	AutoAllowOwner       bool              `protobuf:"varint,5,opt,name=autoAllowOwner,proto3" json:"autoAllowOwner,omitempty"`
	Audit                bool              `protobuf:"varint,6,opt,name=audit,proto3" json:"audit,omitempty"`
	Tags                 map[string]string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *JanusGuardSubject) Reset()         { *m = JanusGuardSubject{} }
func (m *JanusGuardSubject) String() string { return proto.CompactTextString(m) }
func (*JanusGuardSubject) ProtoMessage()    {}
func (*JanusGuardSubject) Descriptor() ([]byte, []int) {
	return fileDescriptor_janus_46b3ab12a2781b9c, []int{1}
}
func (m *JanusGuardSubject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JanusGuardSubject.Unmarshal(m, b)
}
func (m *JanusGuardSubject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JanusGuardSubject.Marshal(b, m, deterministic)
}
func (dst *JanusGuardSubject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JanusGuardSubject.Merge(dst, src)
}
func (m *JanusGuardSubject) XXX_Size() int {
	return xxx_messageInfo_JanusGuardSubject.Size(m)
}
func (m *JanusGuardSubject) XXX_DiscardUnknown() {
	xxx_messageInfo_JanusGuardSubject.DiscardUnknown(m)
}

var xxx_messageInfo_JanusGuardSubject proto.InternalMessageInfo

func (m *JanusGuardSubject) GetAllow() []string {
	if m != nil {
		return m.Allow
	}
	return nil
}

func (m *JanusGuardSubject) GetDeny() []string {
	if m != nil {
		return m.Deny
	}
	return nil
}

func (m *JanusGuardSubject) GetEvent() []string {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *JanusGuardSubject) GetOnlyDir() bool {
	if m != nil {
		return m.OnlyDir
	}
	return false
}

func (m *JanusGuardSubject) GetAutoAllowOwner() bool {
	if m != nil {
		return m.AutoAllowOwner
	}
	return false
}

func (m *JanusGuardSubject) GetAudit() bool {
	if m != nil {
		return m.Audit
	}
	return false
}

func (m *JanusGuardSubject) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type JanusdHandle struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	PodName              string   `protobuf:"bytes,2,opt,name=podName,proto3" json:"podName,omitempty"`
	Pid                  []int32  `protobuf:"varint,3,rep,packed,name=pid,proto3" json:"pid,omitempty"`
	ProcessEventfd       []int32  `protobuf:"varint,4,rep,packed,name=processEventfd,proto3" json:"processEventfd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JanusdHandle) Reset()         { *m = JanusdHandle{} }
func (m *JanusdHandle) String() string { return proto.CompactTextString(m) }
func (*JanusdHandle) ProtoMessage()    {}
func (*JanusdHandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_janus_46b3ab12a2781b9c, []int{2}
}
func (m *JanusdHandle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JanusdHandle.Unmarshal(m, b)
}
func (m *JanusdHandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JanusdHandle.Marshal(b, m, deterministic)
}
func (dst *JanusdHandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JanusdHandle.Merge(dst, src)
}
func (m *JanusdHandle) XXX_Size() int {
	return xxx_messageInfo_JanusdHandle.Size(m)
}
func (m *JanusdHandle) XXX_DiscardUnknown() {
	xxx_messageInfo_JanusdHandle.DiscardUnknown(m)
}

var xxx_messageInfo_JanusdHandle proto.InternalMessageInfo

func (m *JanusdHandle) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *JanusdHandle) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *JanusdHandle) GetPid() []int32 {
	if m != nil {
		return m.Pid
	}
	return nil
}

func (m *JanusdHandle) GetProcessEventfd() []int32 {
	if m != nil {
		return m.ProcessEventfd
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_janus_46b3ab12a2781b9c, []int{3}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*JanusdConfig)(nil), "janus.JanusdConfig")
	proto.RegisterType((*JanusGuardSubject)(nil), "janus.JanusGuardSubject")
	proto.RegisterMapType((map[string]string)(nil), "janus.JanusGuardSubject.TagsEntry")
	proto.RegisterType((*JanusdHandle)(nil), "janus.JanusdHandle")
	proto.RegisterType((*Empty)(nil), "janus.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JanusdClient is the client API for Janusd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JanusdClient interface {
	CreateGuard(ctx context.Context, in *JanusdConfig, opts ...grpc.CallOption) (*JanusdHandle, error)
	DestroyGuard(ctx context.Context, in *JanusdConfig, opts ...grpc.CallOption) (*Empty, error)
	GetGuardState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Janusd_GetGuardStateClient, error)
}

type janusdClient struct {
	cc *grpc.ClientConn
}

func NewJanusdClient(cc *grpc.ClientConn) JanusdClient {
	return &janusdClient{cc}
}

func (c *janusdClient) CreateGuard(ctx context.Context, in *JanusdConfig, opts ...grpc.CallOption) (*JanusdHandle, error) {
	out := new(JanusdHandle)
	err := c.cc.Invoke(ctx, "/janus.Janusd/CreateGuard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *janusdClient) DestroyGuard(ctx context.Context, in *JanusdConfig, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/janus.Janusd/DestroyGuard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *janusdClient) GetGuardState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Janusd_GetGuardStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Janusd_serviceDesc.Streams[0], "/janus.Janusd/GetGuardState", opts...)
	if err != nil {
		return nil, err
	}
	x := &janusdGetGuardStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Janusd_GetGuardStateClient interface {
	Recv() (*JanusdHandle, error)
	grpc.ClientStream
}

type janusdGetGuardStateClient struct {
	grpc.ClientStream
}

func (x *janusdGetGuardStateClient) Recv() (*JanusdHandle, error) {
	m := new(JanusdHandle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JanusdServer is the server API for Janusd service.
type JanusdServer interface {
	CreateGuard(context.Context, *JanusdConfig) (*JanusdHandle, error)
	DestroyGuard(context.Context, *JanusdConfig) (*Empty, error)
	GetGuardState(*Empty, Janusd_GetGuardStateServer) error
}

func RegisterJanusdServer(s *grpc.Server, srv JanusdServer) {
	s.RegisterService(&_Janusd_serviceDesc, srv)
}

func _Janusd_CreateGuard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JanusdConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JanusdServer).CreateGuard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/janus.Janusd/CreateGuard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JanusdServer).CreateGuard(ctx, req.(*JanusdConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Janusd_DestroyGuard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JanusdConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JanusdServer).DestroyGuard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/janus.Janusd/DestroyGuard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JanusdServer).DestroyGuard(ctx, req.(*JanusdConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Janusd_GetGuardState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JanusdServer).GetGuardState(m, &janusdGetGuardStateServer{stream})
}

type Janusd_GetGuardStateServer interface {
	Send(*JanusdHandle) error
	grpc.ServerStream
}

type janusdGetGuardStateServer struct {
	grpc.ServerStream
}

func (x *janusdGetGuardStateServer) Send(m *JanusdHandle) error {
	return x.ServerStream.SendMsg(m)
}

var _Janusd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "janus.Janusd",
	HandlerType: (*JanusdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGuard",
			Handler:    _Janusd_CreateGuard_Handler,
		},
		{
			MethodName: "DestroyGuard",
			Handler:    _Janusd_DestroyGuard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetGuardState",
			Handler:       _Janusd_GetGuardState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "janus.proto",
}

func init() { proto.RegisterFile("janus.proto", fileDescriptor_janus_46b3ab12a2781b9c) }

var fileDescriptor_janus_46b3ab12a2781b9c = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xee, 0xfa, 0x27, 0xae, 0x27, 0xa1, 0x82, 0x85, 0xc3, 0x2a, 0xe2, 0x60, 0xf9, 0x50, 0xf9,
	0x14, 0xa1, 0x54, 0x2a, 0x3f, 0x37, 0xd4, 0x86, 0x22, 0x0e, 0x20, 0x19, 0x5e, 0x60, 0x9b, 0xdd,
	0x5a, 0x2e, 0xce, 0xae, 0xb5, 0x5e, 0xb7, 0xf2, 0x85, 0x27, 0xe1, 0x21, 0x78, 0x12, 0x9e, 0x09,
	0xed, 0x6c, 0xdc, 0x92, 0x42, 0x7a, 0x9b, 0xef, 0x9b, 0x6f, 0x33, 0xf3, 0xcd, 0x17, 0xc3, 0xf4,
	0x9a, 0xab, 0xbe, 0x5b, 0xb4, 0x46, 0x5b, 0x4d, 0x63, 0x04, 0xf9, 0x6f, 0x02, 0xb3, 0x4f, 0xae,
	0x12, 0x67, 0x5a, 0x5d, 0xd5, 0x15, 0xa5, 0x10, 0x29, 0xbe, 0x91, 0x8c, 0x64, 0xa4, 0x48, 0x4b,
	0xac, 0xe9, 0x1c, 0x0e, 0x95, 0x16, 0xf2, 0xb3, 0xe3, 0x03, 0xe4, 0xef, 0x30, 0x65, 0x90, 0xb4,
	0x5a, 0x60, 0x2b, 0xc4, 0xd6, 0x08, 0xe9, 0x53, 0x08, 0xdb, 0x5a, 0xb0, 0x28, 0x0b, 0x8b, 0xb8,
	0x74, 0xa5, 0x63, 0xd6, 0xb5, 0x60, 0x71, 0x16, 0x16, 0x69, 0xe9, 0x4a, 0xba, 0x84, 0xa4, 0xeb,
	0x2f, 0xaf, 0xe5, 0xda, 0xb2, 0x49, 0x16, 0x16, 0xd3, 0x25, 0x5b, 0xf8, 0x25, 0x71, 0xa7, 0x8b,
	0x9e, 0x1b, 0xf1, 0xd5, 0xf7, 0xcb, 0x51, 0x48, 0x5f, 0x42, 0xda, 0xe8, 0xea, 0x83, 0x36, 0x1b,
	0x6e, 0x59, 0x82, 0x33, 0xef, 0x89, 0xfc, 0x67, 0x00, 0xcf, 0xfe, 0x79, 0x4c, 0x5f, 0x40, 0xcc,
	0x9b, 0x46, 0xdf, 0x32, 0x82, 0xb3, 0x3d, 0x70, 0x5e, 0x85, 0x54, 0x03, 0x0b, 0x90, 0xc4, 0xda,
	0x29, 0xe5, 0x8d, 0x54, 0x96, 0x85, 0x5e, 0x89, 0xc0, 0xb9, 0xd4, 0xaa, 0x19, 0xce, 0x6b, 0xc3,
	0xa2, 0x8c, 0x14, 0x87, 0xe5, 0x08, 0xe9, 0x31, 0x1c, 0xf1, 0xde, 0xea, 0xf7, 0xee, 0x07, 0xbf,
	0xdc, 0x2a, 0x69, 0x58, 0x8c, 0x82, 0x07, 0x2c, 0x6e, 0xd0, 0x8b, 0xda, 0xf9, 0x74, 0x6d, 0x0f,
	0xe8, 0x29, 0x44, 0x96, 0x57, 0x1d, 0x4b, 0xd0, 0x7c, 0xbe, 0xcf, 0xfc, 0xe2, 0x1b, 0xaf, 0xba,
	0x95, 0xb2, 0x66, 0x28, 0x51, 0x3f, 0x7f, 0x0d, 0xe9, 0x1d, 0xe5, 0xce, 0xfa, 0x5d, 0x0e, 0xdb,
	0xc4, 0x5c, 0xe9, 0x86, 0xdd, 0xf0, 0xa6, 0x1f, 0xd3, 0xf2, 0xe0, 0x5d, 0xf0, 0x86, 0xe4, 0x3f,
	0xc6, 0xb8, 0x3f, 0x72, 0x25, 0x9a, 0xdd, 0x68, 0xc9, 0xfe, 0x68, 0x83, 0xff, 0x46, 0x1b, 0xde,
	0x47, 0x7b, 0x0c, 0x47, 0xad, 0xd1, 0x6b, 0xd9, 0x75, 0x2b, 0x77, 0xb0, 0xab, 0x31, 0xf7, 0x07,
	0x6c, 0x9e, 0x40, 0xbc, 0xda, 0xb4, 0x76, 0x58, 0xfe, 0x22, 0x30, 0xf1, 0x9b, 0xd0, 0xb7, 0x30,
	0x3d, 0x33, 0x92, 0x5b, 0x89, 0x96, 0xe9, 0xf3, 0xbf, 0xaf, 0xb0, 0xfd, 0x5b, 0xce, 0x77, 0x49,
	0xbf, 0x7c, 0x7e, 0x40, 0x4f, 0x60, 0x76, 0x2e, 0x3b, 0x6b, 0xf4, 0xf0, 0xc8, 0xdb, 0xd9, 0x96,
	0xc4, 0xc1, 0xf9, 0x01, 0x3d, 0x85, 0x27, 0x17, 0xd2, 0xfa, 0xfb, 0x5a, 0x6e, 0x25, 0xdd, 0x11,
	0xec, 0x19, 0xf5, 0x8a, 0x5c, 0x4e, 0xf0, 0xcb, 0x39, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0xf6,
	0x05, 0x83, 0x52, 0x48, 0x03, 0x00, 0x00,
}
